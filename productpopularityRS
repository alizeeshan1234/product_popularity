use std::{collections::HashMap, iter::Product};

fn popularity_analysis(scores : Vec<u32>) -> bool {
    let mut _increasing = true;
    let mut _decreasing = true;

    // here the for loop is iterating from n to n - 1 or from 0 to scores.len() - 1 
    // Which means that the loop will start iterating from 0 and will end at the last element 
    // of the vector. the scores.len() - 1 or n - 1 is used to get the last element of the vector

    for score in 0..scores.len() - 1 {
        if scores[score] > scores[score + 1]{
            _increasing = false;
        }
        if scores[score] < scores[score + 1] {
            _decreasing = false;
        }
    }

    return _increasing || _decreasing;
}

fn main() {
    let mut products = HashMap::new();
    products.insert("product 1", vec![1,2,2,3]);
    products.insert("product 2", vec![4,5,6,3,4]);
    products.insert("product 3", vec![8,8,7,6,5,4,4,1]);

    for (product_id , popularity) in  products{
        if popularity_analysis(popularity) == true {
            println!("{} popularity is increasing or decreasing" , product_id);
        }else {
            println!("{} popularity is fluctuating" , product_id);
        }
    }

    let vec = vec![1,2,3,4,5];
    println!("{}" , vec[1 + 1]);
    println!("{}" , vec.len() - 1);

}

